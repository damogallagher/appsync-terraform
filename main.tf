provider "aws" {
  region = "us-east-1" # Change to your desired region
}

# DynamoDB Table
resource "aws_dynamodb_table" "example_table" {
  name         = "example-table"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "id"

  attribute {
    name = "id"
    type = "S"
  }

  attribute {
    name = "created_at"
    type = "S"
  }

  # Add a Global Secondary Index (GSI) on created_at
  global_secondary_index {
    name            = "created_at-index"
    hash_key        = "created_at" # The attribute to index
    projection_type = "ALL"        # Project all attributes for the index
    read_capacity   = 5            # Set read capacity units (only needed for provisioned mode)
    write_capacity  = 5            # Set write capacity units (only needed for provisioned mode)
  }
}

# Lambda Function for Resolver
resource "aws_lambda_function" "example_lambda" {
  function_name = "example-appsync-lambda"

  handler = "index.handler"
  runtime = "nodejs22.x" # Use the appropriate runtime for your function

  role = aws_iam_role.lambda_execution_role.arn

  # Use the ZIP file generated by archive_file data source
  filename         = data.archive_file.lambda_zip.output_path
  source_code_hash = data.archive_file.lambda_zip.output_base64sha256 # Correct way to reference the hash

  timeout = 60
}

# IAM Role for Lambda (only for Lambda's execution)
resource "aws_iam_role" "lambda_execution_role" {
  name = "example-lambda-execution-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
        Effect = "Allow"
        Sid    = ""
      }
    ]
  })
}

# Lambda Policy to access DynamoDB
resource "aws_iam_role_policy" "lambda_dynamodb_policy" {
  name = "example-lambda-dynamodb-policy"
  role = aws_iam_role.lambda_execution_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "dynamodb:GetItem"
        ]
        Effect   = "Allow"
        Resource = aws_dynamodb_table.example_table.arn
      }
    ]
  })
}

# Policy to enable CloudWatch Logs for Lambda
resource "aws_iam_role_policy" "lambda_cloudwatch_policy" {
  name = "example-lambda-cloudwatch-policy"
  role = aws_iam_role.lambda_execution_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Effect   = "Allow"
        Resource = "arn:aws:logs:*:*:*" # Allow access to CloudWatch logs
      }
    ]
  })
}

# IAM Role for AppSync (this will allow AppSync to invoke Lambda)
resource "aws_iam_role" "appsync_execution_role" {
  name = "example-appsync-execution-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Principal = {
          Service = "appsync.amazonaws.com"
        }
        Effect = "Allow"
        Sid    = ""
      }
    ]
  })
}

# Policy to allow AppSync to invoke Lambda
resource "aws_iam_role_policy" "appsync_lambda_invoke_policy" {
  name = "example-appsync-lambda-invoke-policy"
  role = aws_iam_role.appsync_execution_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = "lambda:InvokeFunction"
        Effect   = "Allow"
        Resource = aws_lambda_function.example_lambda.arn
      }
    ]
  })
}

# AppSync API
resource "aws_appsync_graphql_api" "example_api" {
  name                = "example-appsync-api"
  authentication_type = "API_KEY"
  schema              = <<GRAPHQL
  type Query {
    getItem(id: ID!): Item
     getAllItems: [Item]
  }

  type Item {
    id: ID!
    created_at: String
  }
GRAPHQL
}

# AppSync Lambda DataSource
resource "aws_appsync_datasource" "lambda_datasource" {
  api_id = aws_appsync_graphql_api.example_api.id
  name   = "LambdaDataSource"
  type   = "AWS_LAMBDA"

  lambda_config {
    function_arn = aws_lambda_function.example_lambda.arn
  }

  service_role_arn = aws_iam_role.appsync_execution_role.arn # AppSync execution role
}

# AppSync DynamoDB DataSource (for getAllItems resolver)
resource "aws_appsync_datasource" "dynamodb_datasource" {
  api_id = aws_appsync_graphql_api.example_api.id
  name   = "DynamoDBDataSource"
  type   = "AMAZON_DYNAMODB"

  dynamodb_config {
    table_name = aws_dynamodb_table.example_table.name
  }

  service_role_arn = aws_iam_role.appsync_execution_role.arn # AppSync execution role
}

# AppSync Resolver with Lambda
resource "aws_appsync_resolver" "get_item_resolver" {
  api_id      = aws_appsync_graphql_api.example_api.id
  type        = "Query"
  field       = "getItem"
  data_source = aws_appsync_datasource.lambda_datasource.name
}

# AppSync Resolver for getAllItems with DynamoDB
resource "aws_appsync_resolver" "get_all_items_resolver" {
  api_id      = aws_appsync_graphql_api.example_api.id
  type        = "Query"
  field       = "getAllItems"
  data_source = aws_appsync_datasource.dynamodb_datasource.name

  request_template = <<VTL
{
  "version": "2018-05-29",
  "operation": "Scan"
}
VTL

  response_template = <<VTL
{
  "items": $util.toJson($ctx.result.Items)
}
VTL
}


# Lambda function code (Node.js example)
data "archive_file" "lambda_zip" {
  type        = "zip"
  source_file = "lambda/index.mjs" # Your Lambda function file
  output_path = "lambda.zip"
}

# Outputs
output "graphql_api_url" {
  value = aws_appsync_graphql_api.example_api.uris
}
